@use "sass:math";
@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "sass:string";
@use "vars" as vars;

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin font-face(
  $font-family,
  $file-path,
  $weight: normal,
  $style: normal,
  $asset-pipeline: false
) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
    src: url("#{$file-path}.woff") format("woff"),
      url("#{$file-path}.woff2") format("woff2");
  }
}

@mixin hover {
  @media (hover) {
    &:hover {
      @content;
    }
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  position: $pos;
  display: $display;
}

@mixin responsive-ratio($x, $y, $pseudo: false) {
  $padding: string.unquote((math.div($y, $x) * 100) + "%");

  @if $pseudo {
    &::before {
      @include pseudo($pos: relative);

      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

@function get-breakpoint-width($name, $breakpoints: vars.$breakpoints) {
  @if map.has-key($breakpoints, $name) {
    @return map.get($breakpoints, $name);
  } @else {
    @warn "Breakpoint #{$name} wasn't found in $breakpoints.";
    @return null;
  }
}

@mixin mq(
  $max: false,
  $min: false,
  $and: false,
  $media-type: vars.$media-type,
  $breakpoints: vars.$breakpoints
) {
  $max-width: 0;
  $min-width: 0;
  $media-query: "";

  // Max: that breakpoint (exclusive)
  @if $max {
    @if meta.type-of($max) == number {
      $max-width: $max;
    } @else {
      $max-width: get-breakpoint-width($max, $breakpoints);
    }
  }

  // Min: this breakpoint (inclusive)
  @if $min {
    @if meta.type-of($min) == number {
      $min-width: $min + 1px;
    } @else {
      $min-width: get-breakpoint-width($min, $breakpoints) + 1px;
    }
  }

  @if $max-width != 0 {
    $media-query: "#{$media-query} and (max-width: #{$max-width})";
  }

  @if $min-width != 0 {
    $media-query: "#{$media-query} and (min-width: #{$min-width})";
  }

  @if $and {
    $media-query: "#{$media-query} and #{$and}";
  }

  // Remove unnecessary media query prefix 'all and '
  @if $media-type == "all" and $media-query != "" {
    $media-type: "";
    $media-query: string.slice(string.unquote($media-query), 6);
  }

  @media #{$media-type + $media-query} {
    @content;
  }
}
